C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE ART
OBJECT MODULE PLACED IN ART.OBJ
COMPILER INVOKED BY: E:\学习软件\电子\Keil C51 V9.00\C51\BIN\C51.EXE ART.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*
   2          #include <reg52.h>
   3          sbit led1=P1^0;
   4          void main()
   5          {
   6                  led1=1;
   7          }
   8          */
   9          
  10          /*
  11          #include <reg52.h>
  12          #include <intrins.h>
  13          #define uchar unsigned char 
  14          #define uint unsigned int 
  15          
  16          sbit SH_CP=P2^0;
  17          sbit DS=P2^1;
  18          sbit ST_CP=P2^2;
  19          uchar temp;
  20          uchar code DSY_CODE[]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};
  21          
  22          void DelayMS(uint ms)
  23          {
  24                  uchar t;
  25                  while(ms--)
  26                          for(t=0;t<120;t++);
  27          }
  28          
  29          void In_595()          //string input
  30          {
  31                  uchar i;
  32                  for(i=0;i<8;i++)
  33                  {
  34                          temp<<=1;          
  35                          DS=CY;             //parallel input=CF
  36                          SH_CP=1;           
  37                          _nop_();
  38                          _nop_();
  39                          SH_CP=0;
  40                  }
  41          }                 
  42          
  43          void Out_595()             //parallel output
  44          {
  45                  ST_CP=0;
  46                  _nop_();
  47                  ST_CP=1;                   //set data to the output latch while rising edge
  48                  _nop_();
  49                  ST_CP=0;                   //lock the dispaly data
  50          }
  51          
  52          void main()
  53          {
  54                  uchar i;
  55                  while(1)
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 2   

  56                  {
  57                          for(i=0;i<10;i++)
  58                          {
  59                                  temp=DSY_CODE[i];
  60                                  In_595();
  61                                  Out_595();
  62                                  DelayMS(200);
  63                          }
  64                  }
  65          }
  66          */
  67          
  68          /*
  69          #include <reg52.h>
  70          void delay(int z)
  71          {
  72                  int x,y;
  73                  for(x=0;x<z;x++)
  74                          for(y=0;y<110;y++);
  75          }
  76          
  77          void main()
  78          {
  79                  while(1)
  80                  {
  81                          P3=0;
  82                          P2=0x55;
  83                          delay(5);
  84          
  85                          P3=2;
  86                          P2=0x55;
  87                          delay(5);
  88          
  89                          P3=4;
  90                          P2=0x55;
  91                          delay(5);
  92          
  93                          P3=6;
  94                          P2=0x55;
  95                          delay(5);
  96                  }
  97          
  98          }
  99           */
 100          /*
 101          #include <reg52.h>
 102          char code table[]={0x0f,0xe9,0xaf,0xe9,0xaf,0xa9,0xeb,0x11};
 103          void delay(int z)                                       
 104          {
 105                  int x,y;
 106                  for(x=0;x<z;x++)
 107                          for(y=0;y<110;y++);
 108          }
 109          
 110          void main()
 111          {
 112                  int num;
 113                  while(1)
 114                  {
 115                          for(num=0;num<8;num++)
 116                          {
 117                                  P3=num;
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 3   

 118                                  P2=table[num];
 119                                  delay(5);
 120                          }
 121                  }
 122          
 123          }
 124          */
 125          /*
 126          #include <reg52.h>
 127          char code table[]={0X00,0X04,0X04,0XFE,0X7E,0X84,0X44,0X84,
 128                                                  0X44,0X84,0X44,0XFC,0X7C,0X84,0X44,0X84,
 129                                                  0X44,0X84,0X44,0XFC,0X7C,0X84,0X44,0X84,
 130                                                  0X01,0X04,0X01,0X04,0X02,0X14,0X04,0X08};
 131          void delay(int z)                                       
 132          {
 133                  int x,y;
 134                  for(x=0;x<z;x++)
 135                          for(y=0;y<110;y++);
 136          }
 137          
 138          void main()
 139          {
 140                  int num;
 141                  while(1)
 142                  {
 143                          for(num=0;num<16;num++)
 144                          {
 145                                  P3=num;                                   
 146                                  P2=table[2*num];                  //A0~A7
 147                                  P1=table[2*num+1];                //A8~A15
 148                                  delay(2);
 149                          }
 150                  }
 151          
 152          }
 153          */
 154          /*
 155          #include <reg52.h>
 156          sbit R=P2^0;
 157          sbit CLK=P2^1;
 158          sbit STB=P2^2;
 159          char code table[]={0X00,0X04,0X04,0XFE,0X7E,0X84,0X44,0X84,
 160                                                  0X44,0X84,0X44,0XFC,0X7C,0X84,0X44,0X84,
 161                                                  0X44,0X84,0X44,0XFC,0X7C,0X84,0X44,0X84,
 162                                                  0X01,0X04,0X01,0X04,0X02,0X14,0X04,0X08};
 163          void delay(int z)
 164          {
 165                  int x,y;
 166                  for(x=0;x<z;x++)
 167                          for(y=0;y<110;y++);
 168          }
 169          
 170          void WriteByte(char dat)
 171          {
 172                  char i;
 173                  for(i=0;i<8;i++)
 174                  {
 175                          dat=dat>>1;
 176                          R=CY;
 177                          CLK=0;
 178                          CLK=1;
 179                  }
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 4   

 180          }
 181          
 182          void main()
 183          {
 184                  int num;
 185                  while(1)
 186                  {
 187                          for(num=0;num<16;num++)
 188                          {
 189                                  WriteByte(table[2*num]);
 190                                  WriteByte(table[2*num+1]);
 191                                  P1=num;
 192                                  STB=1;                                                  //12脚
 193                                  STB=0;                                                  //锁存显示数据
 194                                  delay(2);
 195                          }
 196                  }
 197          }
 198          */
 199          /*
 200          #include <reg52.h>       //四个点阵上移
 201          sbit R=P2^0;
 202          sbit CLK=P2^1;
 203          sbit STB=P2^2;
 204          char code table[]={0X00,0X04,0X04,0XFE,0X7E,0X84,0X44,0X84,
 205                                                  0X44,0X84,0X44,0XFC,0X7C,0X84,0X44,0X84,
 206                                                  0X44,0X84,0X44,0XFC,0X7C,0X84,0X44,0X84,
 207                                                  0X01,0X04,0X01,0X04,0X02,0X14,0X04,0X08,
 208                                                  
 209                                                  0x02,0x00,0x02,0x00,0x04,0x00,0x08,0x20,
 210                                                  0x10,0x10,0x20,0x08,0xef,0xfc,0x00,0x04,
 211                                                  0x00,0x10,0x1f,0xf8,0x10,0x10,0x10,0x10,
 212                                                  0x10,0x10,0x10,0x10,0x1f,0xf0,0x10,0x10};
 213          
 214                                          //      0x40,0x00,0x40,0x00,0x20,0x00,0x10,0x04,
 215                                          //      0x08,0x08,0x04,0x10,0xfe,0x3f,0x00,0x20,
 216                                          //      0x00,0x08,0xf8,0x1f,0x08,0x08,0x08,0x08,
 217                                          //      0x08,0x08,0x08,0x08,0xf8,0x0f,0x08,0x08
 218          
 219          void delay(int z)
 220          {
 221                  int x,y;
 222                  for(x=0;x<z;x++)
 223                          for(y=0;y<110;y++);
 224          }
 225          
 226          void WriteByte(char dat)
 227          {
 228                  char i;
 229                  for(i=0;i<8;i++)
 230                  {
 231                          dat=dat>>1;
 232                          R=CY;
 233                          CLK=0;
 234                          CLK=1;
 235                  }
 236          }
 237          
 238          void main()
 239          {
 240                  int num,move,speed;
 241                  while(1)
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 5   

 242                  {
 243                          if(++speed>8)                                           //移动速度控制
 244                          {
 245                                  speed=0;
 246                                  move++;                                                 //移位
 247                                  if(move>16)                                             //是否完成移位一个汉字
 248                                          move=0;                                         //从头开始
 249                          }
 250                          for(num=0;num<16;num++)
 251                          {
 252                                  WriteByte(table[2*num+move*2]);
 253                                  WriteByte(table[2*num+1+move*2]);
 254                                  P1=num;
 255                                  STB=1;                                                  //12脚
 256                                  STB=0;                                                  //锁存显示数据
 257                                  delay(2);
 258                          }
 259                  }
 260          }
 261          */
 262          /*
 263          #include <reg52.h>       //四个点阵左移
 264          #define uchar unsigned char
 265          #define uint unsigned int
 266          
 267          uchar yid,h;               //yid为为移位计数器，H为行段计数器
 268          uint zimuo;                        //字模计数器
 269          uchar code hanzi[];        //汉字字模
 270          uchar BUFF[4];             //缓存
 271          void in_data();            //调整数据
 272          void rxd_data();           //发送数据
 273          void sbuf_out();           //16段扫描
 274          sbit LOCK=P1^7;
 275          char code table[]={0X00,0X04,0X04,0XFE,0X7E,0X84,0X44,0X84,
 276                                                  0X44,0X84,0X44,0XFC,0X7C,0X84,0X44,0X84,
 277                                                  0X44,0X84,0X44,0XFC,0X7C,0X84,0X44,0X84,
 278                                                  0X01,0X04,0X01,0X04,0X02,0X14,0X04,0X08,
 279                                                  
 280                                                  0x02,0x00,0x02,0x00,0x04,0x00,0x08,0x20,
 281                                                  0x10,0x10,0x20,0x08,0xef,0xfc,0x00,0x04,
 282                                                  0x00,0x10,0x1f,0xf8,0x10,0x10,0x10,0x10,
 283                                                  0x10,0x10,0x10,0x10,0x1f,0xf0,0x10,0x10};
 284          
 285                                          //      0x40,0x00,0x40,0x00,0x20,0x00,0x10,0x04,
 286                                          //      0x08,0x08,0x04,0x10,0xfe,0x3f,0x00,0x20,
 287                                          //      0x00,0x08,0xf8,0x1f,0x08,0x08,0x08,0x08,
 288                                          //      0x08,0x08,0x08,0x08,0xf8,0x0f,0x08,0x08
 289          
 290          void delay(int z)
 291          {
 292                  int x,y;
 293                  for(x=0;x<z;x++)
 294                          for(y=0;y<110;y++);
 295          }
 296          
 297          void main()
 298          {
 299                  uchar i,d=10;
 300                  yid=0;
 301                  zimuo=0;
 302                  while(1)
 303                  {
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 6   

 304                          while(yid<16)                           //数据移位
 305                          {
 306                                  for(i=0;i<d;i++)                //移动速度
 307                                  {
 308                                          sbuf_out();
 309                                  }
 310                                  yid++;                                  //移动一步
 311                          }
 312                          yid=0;
 313                          zimuo=zimuo+32;                         //后移一个字
 314                          if(zimuo>=96)                           //到最后从头开始，有字数决定
 315                          zimuo=0;
 316                  }                                
 317          }
 318          
 319          void sbuf_out()
 320          {
 321                  for(h=0;h<16;h++)                               //16行扫描
 322                  {
 323                          in_data();                                      //调整数据
 324                          rxd_data();                                     //串口发送数据
 325                          P1=0x7f;                                        //关闭显示
 326          //              P1^7= 1;                                        //锁存为高，595锁存信号
 327                          LOCK=1;
 328                          P1=h;                                           //送行选
 329                  }
 330          }
 331          
 332          void in_data()
 333          {
 334                  char s;
 335                  for(s=1;s>=0;s--)                                                 //h为向后选择字节计数器，zimuo为向后选字计数器
 336                  {
 337                          BUFF[2*s+1]=table[zimuo+1+32*s+2*h];  //把第一个字模的第一个字节放入BUFF0
 338                                                                                                    //把第二个字模的第一个字节放入BUFF2
 339                          BUFF[2*s]=table[zimuo+32*s+2*h];          //把第一个字模的第二个字节放入BUFF1
 340                                                                                                    //把第二个字模的第二个字节放入BUFF3
 341                  }
 342          }
 343          
 344          void rxd_data()                                                           //串行发送数据
 345          {
 346                  char s;
 347                  uchar inc,tempyid,temp;
 348                  if(yid<8)
 349                          inc=0;
 350                  else
 351                          inc=1;
 352                  for(s=0+inc;s<2+inc;s++)                                  //发送2字节数据
 353                  {
 354                          if(yid<8)
 355                                  tempyid=yid;
 356                          else
 357                                  tempyid=yid-8;
 358                          temp=(BUFF[s]>>tempyid)|(BUFF[s+1]<<(8-tempyid));//h1左移tempyid位后和h2右移8-tempyid
 359                                                                                                                           //后相或，取出移位后的数据
 360                          SBUF=temp;                                                                               //把BUFF中的字节从大到小移位相或后发送输出
 361                          while(!TI);                                                                              //     这里使用了串口，串口数据的发送为最低位在前
 362                          TI=0;                                                                                    //等待发送中断
 363                  }
 364          }
 365          */
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 7   

 366          /*
 367          #include <reg51.h>
 368          #define uchar unsigned char 
 369          #define uint unsigned int 
 370          sbit SDA=P1^0;
 371          sbit CLK=P1^1;
 372          sbit RST=P1^2;
 373          sbit K1=P3^5;      //choose
 374          sbit K2=P3^6;      //adjust
 375          sbit K3=P3^7;      //confirm
 376          
 377          uchar code DSY_CODE[]={0x0c,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};
 378          uchar Display_Buffer[]={0x00,0x00,0xbf,0x00,0x00,0xbf,0x00,0x00};
 379          uchar Bit_Code[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
 380          
 381          uchar Current_Time[7];
 382          uchar Adjust_Flag=0;
 383          
 384          void DelayMS(uint x)
 385          {
 386                  uchar i;
 387                  while(x--)
 388                          for(i=0;i<120;i++);
 389          }
 390          
 391          void Write_A_Byte_To_DS1302(uchar x)
 392          {
 393                  uchar i;
 394                  for(i=0;i<8;i++)
 395                  {
 396                          SDA=x&1;
 397                          CLK=1;
 398                          CLK=0;
 399                          x>>=1;
 400                  }
 401          }
 402          
 403          uchar Get_A_Byte_From_DS1302()
 404          {
 405                  uchar i,b,t;
 406                  for(i=0;i<8;i++)
 407                  {
 408                          b>>=1;
 409                          t=SDA;
 410                          b|=t<<7;
 411                          CLK=1;
 412                          CLK=0;
 413                  }
 414                  return b/16*10+b%16;
 415          }
 416          
 417          uchar Read_Data(uchar addr)
 418          {
 419                  uchar dat;
 420                  RST=0;
 421                  CLK=0;
 422                  RST=1;
 423                  Write_A_Byte_To_DS1302(addr);
 424                  dat=Get_A_Byte_From_DS1302();
 425                  CLK=1;
 426                  RST=0;
 427                  return dat;
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 8   

 428          }
 429          
 430          void Write_DS1302(uchar addr,uchar dat)
 431          {
 432                  CLK=0;
 433                  RST=1;
 434                  Write_A_Byte_To_DS1302(addr);
 435                  Write_A_Byte_To_DS1302(dat);
 436                  CLK=0;
 437                  RST=0;
 438          }
 439          
 440          void SET_DS1302()
 441          {
 442                  Write_DS1302(0x8e,0x00);
 443                  Write_DS1302(0x82,(Current_Time[1]/10<<4)|(Current_Time[1]%10));
 444                  Write_DS1302(0x84,(Current_Time[2]/10<<4)|(Current_Time[2]%10));
 445                  Write_DS1302(0x8e,0x80);
 446          }
 447          
 448          void GetTime()
 449          {
 450                  Current_Time[0]=Read_Data(0x81);
 451                  Current_Time[1]=Read_Data(0x83);
 452                  Current_Time[2]=Read_Data(0x85);
 453          }
 454          
 455          void EX_INT0() interrupt 0
 456          {
 457                  if(K1==0)
 458                  {
 459                          Adjust_Flag=1;
 460                          Current_Time[2]=(Current_Time[2]+1)%24;
 461                  }
 462                  else
 463                  if(K2==0)
 464                  {
 465                          Adjust_Flag=1;
 466                          Current_Time[1]=(Current_Time[1]+1)%60;
 467                  }
 468                  else
 469                  if(K3==0)
 470                  {
 471                          SET_DS1302();
 472                          Adjust_Flag=0;
 473                  }
 474          }
 475          
 476          void main()
 477          {
 478                  uchar i;
 479                  IE=0x81;
 480                  IT0=0x01;
 481                  while(1)
 482                  {
 483                          if(Adjust_Flag==0)
 484                          GetTime();
 485                          Display_Buffer[0]=DSY_CODE[Current_Time[2]/10];
 486                          Display_Buffer[1]=DSY_CODE[Current_Time[2]%10];
 487                          Display_Buffer[3]=DSY_CODE[Current_Time[1]/10];
 488                          Display_Buffer[4]=DSY_CODE[Current_Time[1]%10];
 489                          Display_Buffer[6]=DSY_CODE[Current_Time[0]/10];
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 9   

 490                          Display_Buffer[7]=DSY_CODE[Current_Time[0]%10];
 491                          for(i=0;i<8;i++)
 492                          {
 493                                  P2=Bit_Code[i];
 494                                  P0=Display_Buffer[i];
 495                                  DelayMS(2);
 496                          }
 497                  }
 498          }
 499          */
 500          
 501          /*
 502          uchar code zero[]={0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,
 503                                        0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00};
 504          
 505          uchar code one[]= {0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
 506                                            0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00};
 507          
 508          uchar code two[]= {0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,
 509                                            0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00};
 510          
 511          uchar code three[]={0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,
 512                                             0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00};
 513          
 514          uchar code four[]={0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,
 515                                            0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00};
 516          
 517          uchar code five[]={0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,
 518                                            0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00};
 519          
 520          uchar code six[]={0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,
 521                                       0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00};
 522          
 523          uchar code seven[]={0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,
 524                                             0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00};
 525          
 526          uchar code eight[]={0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,
 527                                             0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00};
 528          
 529          uchar code nine[]={0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,
 530                                            0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00};
 531          */
 532          
 533          /*
 534          #include<reg52.h>
 535          #define uchar unsigned char 
 536          #define uint unsigned int 
 537          
 538          sbit SDA=P3^5;                  //DS1302
 539          sbit SCLK=P3^6;
 540          sbit RST=P3^7;
 541          
 542          sbit K1=P2^5;                   //choose
 543          sbit K2=P2^6;                   //adjust
 544          sbit K3=P2^7;                   //confirm
 545          
 546          sbit R1=P2^0;                   //74HC595
 547          sbit CLK=P2^1;
 548          sbit STB=P2^2;
 549          
 550          uchar Current_Time[7];  //Current time
 551          uchar Adjust_Flag=0;    //flag
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 10  

 552          uchar NUM[6]; 
 553          
 554          uchar code Number[]={
 555          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00, //0
 556          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00, //1
 557          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00, //2
 558          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00, //3
 559          0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00, //4
 560          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00, //5
 561          0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00, //6
 562          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00, //7
 563          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00, //8
 564          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00};//9
 565          
 566          void delay(uint z)
 567          {
 568                  int x,y;
 569                  for(x=0;x<z;x++)
 570                          for(y=0;y<110;y++);
 571          }
 572          
 573          //DS1302
 574          void Write_A_Byte_To_DS1302(uchar x)      //向DS1302写入一个字节
 575          {
 576                  uchar i;
 577                  for(i=0;i<8;i++)
 578                  {
 579                          SDA=x&1;
 580                          SCLK=1;
 581                          SCLK=0;
 582                          x>>=1;
 583                  }
 584          }
 585          
 586          uchar Get_A_Byte_From_DS1302()                    //从DS1302读取一个字节
 587          {
 588                  uchar i,b,t;
 589                  for(i=0;i<8;i++)
 590                  {
 591                          b>>=1;
 592                          t=SDA;
 593                          b|=t<<7;
 594                          SCLK=1;
 595                          SCLK=0;
 596                  }
 597                  return b/16*10+b%16;
 598          }
 599          
 600          uchar Read_Data(uchar addr)                               //从DS1302指定位置读数据
 601          {
 602                  uchar dat;
 603                  RST=0;
 604                  SCLK=0;
 605                  RST=1;
 606                  Write_A_Byte_To_DS1302(addr);
 607                  dat=Get_A_Byte_From_DS1302();
 608                  SCLK=1;
 609                  RST=0;
 610                  return dat;
 611          }
 612          
 613          void Write_DS1302(uchar addr,uchar dat)    //向DS1302某地址写入数据
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 11  

 614          {
 615                  SCLK=0;
 616                  RST=1;
 617                  Write_A_Byte_To_DS1302(addr);
 618                  Write_A_Byte_To_DS1302(dat);
 619                  SCLK=0;
 620                  RST=0;
 621          }
 622          
 623          void SET_DS1302()                                                  //设置时间
 624          {
 625                  Write_DS1302(0x8e,0x00);
 626                  Write_DS1302(0x82,(Current_Time[1]/10<<4)|(Current_Time[1]%10));
 627                  Write_DS1302(0x84,(Current_Time[2]/10<<4)|(Current_Time[2]%10));
 628                  Write_DS1302(0x8e,0x80);
 629          }
 630          
 631          void GetTime()                                                    //读取当前时间（秒，分，时）
 632          {
 633                  Current_Time[0]=Read_Data(0x81);          //second
 634                  Current_Time[1]=Read_Data(0x83);          //minute
 635                  Current_Time[2]=Read_Data(0x85);          //hour
 636          }
 637          
 638          void EX_INT0() interrupt 0                                 //键盘中断
 639          {
 640                  if(K1==0)
 641                  {
 642                          Adjust_Flag=1;
 643                          Current_Time[2]=(Current_Time[2]+1)%24;
 644                  }
 645                  else
 646                  if(K2==0)
 647                  {
 648                          Adjust_Flag=1;
 649                          Current_Time[1]=(Current_Time[1]+1)%60;
 650                  }
 651                  else
 652                  if(K3==0)
 653                  {
 654                          SET_DS1302();
 655                          Adjust_Flag=0;
 656                  }
 657          }
 658          
 659          //74HC595
 660          
 661          void WriteByte(uchar dat)       //写一个字节数据
 662          {
 663                  char i;
 664                  for(i=0;i<8;i++)                //循环8次把编码传给锁存器
 665                  {
 666                          dat=dat>>1;                     //右移一位，取出该字节的最低位
 667                          R1=CY;                          //将该字节的最低位传给R
 668                          CLK=0;                          //将数据移入595，上升沿
 669                          CLK=1;
 670                  }
 671          }
 672          
 673           void main()
 674          {
 675                  uint num;
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 12  

 676                  IE=0x81;
 677                  IT0=0x01;
 678                  while(1)
 679                  {
 680          //              uint speed,mov;
 681                          if(Adjust_Flag==0)
 682                          GetTime();
 683                          NUM[0]=Current_Time[2]/10;                //hour
 684                          NUM[1]=Current_Time[2]%10;
 685                          NUM[2]=Current_Time[1]/10;                //minute
 686                          NUM[3]=Current_Time[1]%10;
 687                          NUM[4]=Current_Time[0]/10;                //second
 688                          NUM[5]=Current_Time[0]%10;
 689          //              if(++speed>8)                                     //切换间隔
 690          //              {
 691          //                      speed=0;
 692          //                      mov++;
 693          //                      k++;
 694          //                      if(mov>16)
 695          //                      {
 696          //                              NUM[0]=k%2;
 697          //                              NUM[1]=k%3;
 698          //                              NUM[2]=k%4;
 699          //                              NUM[3]=k%5;
 700          //                              NUM[4]=k%6;
 701          //                              NUM[5]=k%7;
 702          //                              mov=0;
 703          //                      }
 704          //                      if(k>100)
 705          //                              k=0;
 706          //              }
 707                          for(num=0;num<16;num++)
 708                          {       
 709                                  P1=num; 
 710          
 711                                  WriteByte(Number[NUM[0]*16+num]);                       // hour
 712                                  WriteByte(Number[NUM[1]*16+num]);
 713                                  WriteByte(Number[NUM[2]*16+num]);                       //minute
 714                                  WriteByte(Number[NUM[3]*16+num]);
 715                                  WriteByte(Number[NUM[4]*16+num]);                       //second
 716                                  WriteByte(Number[NUM[5]*16+num]);
 717                                  STB=0;                                                  //12脚  
 718                                  STB=1;
 719                                  delay(3);                                                       //锁存显示数据
 720          
 721                          }
 722                  }
 723          }
 724          
 725          /*
 726          #include<reg52.h>
 727          #define uchar unsigned char 
 728          #define uint unsigned int 
 729          
 730          sbit SDA=P3^5;                  //DS1302
 731          sbit SCLK=P3^6;
 732          sbit RST=P3^7;
 733          
 734          sbit K1=P2^5;                   //choose
 735          sbit K2=P2^6;                   //adjust
 736          sbit K3=P2^7;                   //confirm
 737          
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 13  

 738          sbit R1=P2^0;                   //74HC595
 739          sbit CLK=P2^1;
 740          sbit STB=P2^2;
 741          
 742          uchar Current_Time[7];  //Current time
 743          uchar Adjust_Flag=0;    //flag
 744          uchar NUM[6]; 
 745          
 746          uchar code Number[]={
 747          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00, //0
 748          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00, //1
 749          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00, //2
 750          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00, //3
 751          0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00, //4
 752          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00, //5
 753          0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00, //6
 754          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00, //7
 755          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00, //8
 756          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00};//9
 757           
 758          uchar code zero_one[]={                                                                                                                 //0   ->   1
 759          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
 760          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
 761          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
 762          0x7f,0x41,0x41,0x41,0x21,0x21,0x21,0x21,0x21,0x21,0x21,0x41,0x41,0x41,0x7f,0x00,//fir
 763          0x07,0x79,0x21,0x21,0x21,0x11,0x11,0x11,0x11,0x11,0x21,0x21,0x21,0x79,0x07,0x00,
 764          0x01,0x1f,0x61,0x21,0x11,0x11,0x09,0x09,0x09,0x11,0x11,0x21,0x61,0x1f,0x01,0x00,
 765          0x01,0x07,0x19,0x61,0x11,0x11,0x09,0x05,0x09,0x11,0x11,0x61,0x19,0x07,0x01,0x00,
 766          0x01,0x03,0x0d,0x11,0x31,0x09,0x05,0x03,0x05,0x09,0x31,0x11,0x0d,0x03,0x01,0x00,
 767          0x01,0x03,0x05,0x09,0x11,0x39,0x07,0x01,0x07,0x39,0x11,0x09,0x05,0x03,0x01,0x00,//mid
 768          0x01,0x03,0x05,0x05,0x09,0x1f,0x01,0x01,0x01,0x1f,0x09,0x05,0x05,0x03,0x01,0x00,
 769          0x01,0x03,0x03,0x05,0x07,0x0d,0x09,0x01,0x09,0x0d,0x07,0x05,0x03,0x03,0x01,0x00,
 770          0x01,0x03,0x03,0x03,0x03,0x05,0x05,0x05,0x05,0x05,0x03,0x03,0x03,0x03,0x01,0x00,
 771          0x01,0x01,0x01,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x01,0x01,0x01,0x00,
 772          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,//last
 773          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
 774          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
 775          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00};
 776          
 777          uchar code one_two[]={                                                                                                                  //1   ->    2
 778          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
 779          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
 780          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
 781          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,//fir
 782          0x01,0x01,0x01,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x01,0x01,0x01,0x00,
 783          0x01,0x03,0x03,0x03,0x03,0x05,0x05,0x05,0x06,0x06,0x02,0x02,0x02,0x02,0x01,0x00,
 784          0x01,0x03,0x03,0x05,0x05,0x09,0x09,0x01,0x0b,0x0a,0x06,0x04,0x0a,0x02,0x01,0x00,
 785          0x01,0x03,0x05,0x05,0x09,0x11,0x01,0x01,0x02,0x15,0x0e,0x0c,0x14,0x02,0x01,0x00,
 786          0x01,0x03,0x05,0x09,0x11,0x21,0x01,0x01,0x02,0x24,0x19,0x1e,0x34,0x02,0x01,0x00,//mid
 787          0x01,0x03,0x0d,0x11,0x21,0x01,0x01,0x01,0x02,0x0c,0x30,0x3f,0x04,0x02,0x01,0x00,
 788          0x01,0x07,0x19,0x61,0x01,0x01,0x01,0x01,0x03,0x18,0x60,0x78,0x1e,0x06,0x01,0x00,
 789          0x01,0x1f,0x61,0x01,0x01,0x01,0x01,0x01,0x1e,0x60,0x20,0x10,0x68,0x1e,0x01,0x00,
 790          0x07,0x79,0x01,0x01,0x01,0x01,0x01,0x07,0x78,0x20,0x20,0x10,0x10,0x78,0x07,0x00,
 791          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,//last
 792          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,
 793          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,
 794          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00};
 795          
 796          uchar code two_three[]={                                                                                                                //2   ->   3
 797          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,
 798          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,
 799          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 14  

 800          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,//fir
 801          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x20,0x20,0x20,0x20,0x40,0x78,0x7f,0x00,
 802          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x10,0x20,0x20,0x20,0x60,0x3e,0x7f,0x00,
 803          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x80,0x80,0x10,0x70,0x38,0x26,0x7f,0x00,
 804          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,0x04,0x28,0x10,0x1c,0x22,0x7f,0x00,
 805          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,0x22,0x14,0x08,0x14,0x22,0x7f,0x00,//mid
 806          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,0x10,0x0a,0x04,0x1c,0x22,0x7f,0x00,
 807          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x08,0x08,0x04,0x07,0x0e,0x32,0x7f,0x00,
 808          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x02,0x02,0x03,0x3e,0x7f,0x00,
 809          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x02,0x02,0x02,0x02,0x01,0x0f,0x7f,0x00,
 810          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,//last
 811          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
 812          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
 813          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00};
 814                                                                           
 815          uchar code three_four[]={                                                                                                               //3   ->   4
 816          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
 817          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
 818          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
 819          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,//fir
 820          0x71,0x0f,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x79,0x0f,0x00,
 821          0x41,0x3d,0x03,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x61,0x1f,0x01,0x00,
 822          0x41,0x31,0x0d,0x03,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x61,0x19,0x07,0x01,0x00,
 823          0x41,0x21,0x19,0x05,0x03,0x01,0x01,0x7f,0x01,0x01,0x21,0x11,0x0d,0x03,0x01,0x00,
 824          0x41,0x21,0x11,0x09,0x05,0x03,0x01,0x7f,0x01,0x21,0x11,0x09,0x05,0x03,0x01,0x00,//mid
 825          0x41,0x21,0x11,0x11,0x09,0x05,0x01,0x7f,0x01,0x11,0x09,0x05,0x05,0x03,0x01,0x00,
 826          0x41,0x21,0x21,0x11,0x11,0x09,0x09,0x7f,0x09,0x09,0x05,0x05,0x03,0x03,0x01,0x00,
 827          0x41,0x21,0x21,0x21,0x21,0x11,0x11,0x7f,0x05,0x05,0x03,0x03,0x03,0x03,0x01,0x00,
 828          0x41,0x41,0x41,0x21,0x21,0x21,0x21,0x7f,0x03,0x03,0x03,0x03,0x01,0x01,0x01,0x00,
 829          0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,//last
 830          0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
 831          0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
 832          0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00};
 833          
 834          uchar code four_five[]={                                                                                                                //4   ->   5
 835          0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
 836          0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
 837          0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
 838          0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,//fir
 839          0x41,0x41,0x41,0x42,0x42,0x42,0x42,0x7f,0x03,0x03,0x03,0x03,0x01,0x01,0x01,0x00,
 840          0x41,0x42,0x42,0x42,0x42,0x44,0x44,0x7f,0x05,0x05,0x03,0x03,0x03,0x03,0x01,0x00,
 841          0x41,0x42,0x42,0x44,0x44,0x48,0x48,0x7f,0x09,0x09,0x05,0x05,0x03,0x03,0x01,0x00,
 842          0x41,0x42,0x44,0x44,0x48,0x50,0x40,0x7f,0x01,0x11,0x09,0x05,0x05,0x03,0x01,0x00,
 843          0x41,0x42,0x44,0x48,0x50,0x60,0x40,0x7f,0x01,0x21,0x11,0x09,0x05,0x03,0x01,0x00,//mid
 844          0x41,0x42,0x4c,0x50,0x60,0x40,0x40,0x7f,0x01,0x01,0x21,0x11,0x0d,0x03,0x01,0x00,
 845          0x41,0x46,0x58,0x60,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x61,0x19,0x07,0x01,0x00,
 846          0x41,0x5e,0x60,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x61,0x1f,0x01,0x00,
 847          0x47,0x78,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x79,0x07,0x00,
 848          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,//last
 849          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
 850          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
 851          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00};
 852          
 853          uchar code five_six[]={                                                                                                                 //5   ->   6
 854          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
 855          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
 856          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,                                                                                                                                                                                                         
 857          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,//fir
 858          0x70,0x4f,0x40,0x40,0x40,0x40,0x40,0x7f,0x0f,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
 859          0x40,0x7c,0x43,0x40,0x40,0x40,0x40,0x7f,0x3d,0x03,0x01,0x01,0x01,0x01,0x7f,0x00,
 860          0x40,0x70,0x4c,0x43,0x40,0x40,0x40,0x7f,0x31,0x0d,0x03,0x01,0x01,0x01,0x7f,0x00,
 861          0x40,0x60,0x58,0x44,0x42,0x40,0x40,0x7f,0x21,0x19,0x09,0x03,0x01,0x01,0x7f,0x00,
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 15  

 862          0x40,0x60,0x50,0x48,0x44,0x42,0x40,0x7f,0x21,0x11,0x09,0x05,0x03,0x01,0x7f,0x00,//mid
 863          0x40,0x60,0x50,0x50,0x48,0x44,0x40,0x7f,0x21,0x11,0x11,0x09,0x05,0x01,0x7f,0x00,
 864          0x40,0x60,0x60,0x50,0x50,0x48,0x48,0x7f,0x21,0x21,0x11,0x11,0x09,0x09,0x7f,0x00,
 865          0x40,0x60,0x60,0x60,0x60,0x50,0x50,0x7f,0x21,0x21,0x21,0x21,0x11,0x11,0x7f,0x00,
 866          0x40,0x40,0x40,0x60,0x60,0x60,0x60,0x7f,0x41,0x41,0x21,0x21,0x21,0x21,0x7f,0x00,
 867          0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,//last
 868          0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
 869          0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
 870          0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00};
 871          
 872          uchar code six_seven[]={                                                                                                                //6   ->   7
 873          0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
 874          0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
 875          0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
 876          0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,//fir                                                                                                                                                                   
             -                        42,0x
 877          0x40,0x40,0x40,0x40,0x40,0x40,0x78,0x4f,0x21,0x21,0x21,0x21,0x41,0x41,0x7f,0x00,
 878          0x40,0x40,0x40,0x40,0x40,0x60,0x5e,0x49,0x15,0x21,0x21,0x21,0x21,0x79,0x07,0x00,
 879          0x40,0x40,0x40,0x40,0x60,0x78,0x56,0x49,0x0d,0x11,0x11,0x21,0x61,0x1f,0x01,0x00,
 880          0x40,0x40,0x40,0x60,0x70,0x6c,0x62,0x65,0x09,0x11,0x21,0x61,0x19,0x07,0x01,0x00,
 881          0x40,0x40,0x60,0x70,0x68,0x44,0x42,0x41,0x07,0x39,0x11,0x09,0x05,0x03,0x01,0x00,//mid
 882          0x40,0x40,0x50,0x68,0x64,0x44,0x42,0x41,0x01,0x1f,0x09,0x05,0x05,0x03,0x01,0x00,
 883          0x40,0x48,0x58,0x54,0x64,0x62,0x42,0x41,0x09,0x0d,0x07,0x05,0x03,0x03,0x01,0x00,
 884          0x44,0x4c,0x52,0x62,0x42,0x42,0x41,0x45,0x05,0x03,0x03,0x03,0x03,0x01,0x01,0x00,
 885          0x42,0x4e,0x72,0x42,0x41,0x41,0x41,0x43,0x03,0x03,0x03,0x01,0x01,0x01,0x01,0x00,
 886          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,//last
 887          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
 888          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
 889          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00};
 890          
 891          uchar code seven_eight[]={                                                                                                              //7   ->   8
 892          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
 893          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
 894          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
 895          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,//fir
 896          0x7f,0x61,0x61,0x61,0x61,0x41,0x41,0x43,0x03,0x03,0x03,0x01,0x01,0x01,0x01,0x00,
 897          0x7f,0x51,0x51,0x61,0x61,0x61,0x61,0x45,0x05,0x03,0x03,0x03,0x03,0x01,0x01,0x00,
 898          0x7f,0x49,0x49,0x51,0x51,0x61,0x61,0x41,0x09,0x0d,0x07,0x05,0x03,0x03,0x01,0x00,
 899          0x7f,0x41,0x45,0x49,0x51,0x51,0x61,0x41,0x01,0x1f,0x09,0x05,0x05,0x03,0x01,0x00,
 900          0x7f,0x41,0x43,0x45,0x49,0x51,0x31,0x41,0x07,0x39,0x11,0x09,0x05,0x03,0x01,0x00,//mid
 901          0x7f,0x41,0x41,0x43,0x45,0x49,0x59,0x61,0x09,0x11,0x21,0x61,0x19,0x07,0x01,0x00,
 902          0x7f,0x41,0x41,0x41,0x43,0x4d,0x71,0x49,0x0d,0x11,0x11,0x21,0x61,0x1f,0x01,0x00,
 903          0x7f,0x41,0x41,0x41,0x41,0x43,0x7d,0x49,0x15,0x21,0x21,0x21,0x21,0x79,0x07,0x00,
 904          0x7f,0x41,0x41,0x41,0x41,0x41,0x4f,0x71,0x21,0x21,0x21,0x21,0x41,0x41,0x7f,0x00,
 905          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,//last
 906          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
 907          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
 908          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00};
 909          
 910          uchar code eight_nine[]={                                                                                                               //8   ->   9
 911          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
 912          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
 913          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
 914          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,//fir
 915          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x21,0x21,0x21,0x21,0x41,0x41,0x7f,0x00,
 916          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x15,0x21,0x21,0x21,0x21,0x79,0x07,0x00,
 917          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x0d,0x11,0x11,0x21,0x61,0x1f,0x01,0x00,
 918          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x09,0x11,0x21,0x61,0x19,0x07,0x01,0x00,
 919          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x07,0x39,0x11,0x09,0x05,0x03,0x01,0x00,//mid
 920          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x1f,0x09,0x05,0x05,0x03,0x01,0x00,
 921          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x09,0x0d,0x07,0x05,0x03,0x03,0x01,0x00,
 922          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x05,0x03,0x03,0x03,0x03,0x01,0x01,0x00,
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 16  

 923          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x03,0x03,0x03,0x01,0x01,0x01,0x01,0x00,
 924          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,//last
 925          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
 926          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
 927          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00};        
 928          
 929          uchar code nine_zero[]={                                                                                                                //9   ->   0
 930          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
 931          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
 932          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
 933          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,//fir
 934          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x71,0x0f,0x03,0x03,0x03,0x01,0x01,0x01,0x00,
 935          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x3d,0x05,0x03,0x03,0x03,0x03,0x01,0x00,
 936          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x39,0x0d,0x07,0x05,0x03,0x03,0x01,0x00,
 937          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x21,0x19,0x0d,0x07,0x05,0x03,0x01,0x00,
 938          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x21,0x31,0x19,0x0d,0x07,0x03,0x01,0x00,//mid
 939          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x21,0x11,0x31,0x19,0x0d,0x03,0x01,0x00,
 940          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x21,0x21,0x11,0x71,0x19,0x0f,0x01,0x00,
 941          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x21,0x21,0x21,0x61,0x1f,0x11,0x00,
 942          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x21,0x21,0x79,0x27,0x00,
 943          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,//last
 944          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
 945          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
 946          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00};                                                                                                                                                          
 947          
 948          uchar code five_zero[]={                                                                                                                //5   ->   0
 949          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
 950          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
 951          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
 952          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,//fir
 953          0x7f,0x78,0x40,0x40,0x40,0x40,0x40,0x71,0x0f,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
 954          0x7f,0x5e,0x60,0x40,0x40,0x40,0x40,0x41,0x3d,0x03,0x01,0x01,0x01,0x01,0x7f,0x00,
 955          0x7f,0x46,0x58,0x60,0x40,0x40,0x40,0x41,0x31,0x0d,0x03,0x01,0x01,0x01,0x7f,0x00,
 956          0x7f,0x42,0x4c,0x50,0x60,0x40,0x40,0x41,0x21,0x19,0x05,0x02,0x01,0x01,0x7f,0x00,
 957          0x7f,0x42,0x44,0x48,0x50,0x60,0x40,0x41,0x21,0x11,0x09,0x05,0x03,0x01,0x7f,0x00,//mid
 958          0x7f,0x42,0x44,0x44,0x48,0x04,0x40,0x41,0x21,0x11,0x11,0x09,0x05,0x01,0x7f,0x00,
 959          0x7f,0x42,0x42,0x44,0x44,0x48,0x48,0x41,0x21,0x21,0x11,0x11,0x09,0x09,0x7f,0x00,
 960          0x7f,0x42,0x42,0x42,0x42,0x44,0x44,0x41,0x21,0x21,0x21,0x21,0x11,0x11,0x7f,0x00,
 961          0x7f,0x41,0x41,0x42,0x42,0x42,0x42,0x41,0x41,0x41,0x21,0x21,0x21,0x21,0x7f,0x00,
 962          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,//last
 963          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
 964          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
 965          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00};
 966          
 967          uchar code three_zero[]={                                                                                                               //3   ->   0
 968          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
 969          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
 970          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,                                                                                                                                                                           
 971          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,//fir
 972          0x7f,0x0f,0x01,0x01,0x01,0x01,0x01,0x71,0x0f,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
 973          0x7f,0x3d,0x03,0x01,0x01,0x01,0x01,0x41,0x3d,0x03,0x01,0x01,0x01,0x01,0x7f,0x00,
 974          0x7f,0x31,0x0d,0x03,0x01,0x01,0x01,0x41,0x31,0x0d,0x03,0x01,0x01,0x01,0x7f,0x00,
 975          0x7f,0x21,0x19,0x05,0x03,0x01,0x01,0x41,0x21,0x19,0x05,0x03,0x01,0x01,0x7f,0x00,
 976          0x7f,0x21,0x11,0x09,0x05,0x03,0x01,0x41,0x21,0x11,0x09,0x05,0x03,0x01,0x7f,0x00,//mid
 977          0x7f,0x21,0x11,0x11,0x09,0x05,0x01,0x41,0x21,0x11,0x11,0x09,0x05,0x01,0x7f,0x00,
 978          0x7f,0x21,0x21,0x11,0x11,0x09,0x09,0x41,0x21,0x21,0x11,0x11,0x09,0x09,0x7f,0x00,
 979          0x7f,0x21,0x21,0x21,0x21,0x11,0x11,0x41,0x21,0x21,0x21,0x21,0x11,0x11,0x7f,0x00,
 980          0x7f,0x41,0x41,0x21,0x21,0x21,0x21,0x41,0x41,0x41,0x21,0x21,0x21,0x21,0x7f,0x00,
 981          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,//last
 982          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
 983          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
 984          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00};
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 17  

 985          
 986          uchar code two_zero[]={                                                                                                                 //2   ->   0
 987          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,
 988          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,
 989          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,
 990          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,//fir
 991          0x7f,0x0f,0x01,0x01,0x01,0x01,0x01,0x47,0x78,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,
 992          0x7f,0x3d,0x03,0x01,0x01,0x01,0x01,0x41,0x5e,0x60,0x40,0x40,0x40,0x40,0x7f,0x00,
 993          0x7f,0x31,0x0d,0x03,0x01,0x01,0x01,0x41,0x46,0x58,0x60,0x40,0x40,0x40,0x7f,0x00,
 994          0x7f,0x21,0x19,0x05,0x03,0x01,0x01,0x41,0x42,0x4c,0x50,0x60,0x40,0x40,0x7f,0x00,
 995          0x7f,0x21,0x11,0x09,0x05,0x03,0x01,0x41,0x42,0x44,0x48,0x50,0x60,0x40,0x7f,0x00,//mid
 996          0x7f,0x21,0x11,0x11,0x09,0x05,0x01,0x41,0x42,0x44,0x44,0x48,0x50,0x40,0x7f,0x00,
 997          0x7f,0x21,0x21,0x11,0x11,0x09,0x09,0x41,0x42,0x42,0x44,0x44,0x48,0x48,0x7f,0x00,
 998          0x7f,0x21,0x21,0x21,0x21,0x11,0x11,0x41,0x42,0x42,0x42,0x42,0x44,0x44,0x7f,0x00,
 999          0x7f,0x41,0x41,0x21,0x21,0x21,0x21,0x41,0x41,0x41,0x42,0x42,0x42,0x42,0x7f,0x00,
1000          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,//last
1001          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1002          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1003          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00};
1004                                                                                                                                                    
1005          void delay(uint z)                                                         
1006          {
1007                  int x,y;
1008                  for(x=0;x<z;x++)
1009                          for(y=0;y<110;y++);
1010          }
1011          
1012          //DS1302                                                                                                           
1013          void Write_A_Byte_To_DS1302(uchar x)      //向DS1302写入一个字节
1014          {
1015                  uchar i;
1016                  for(i=0;i<8;i++)
1017                  {
1018                          SDA=x&1;
1019                          SCLK=1;
1020                          SCLK=0;
1021                          x>>=1;
1022                  }
1023          }
1024          
1025          uchar Get_A_Byte_From_DS1302()                    //从DS1302读取一个字节
1026          {
1027                  uchar i,b,t;
1028                  for(i=0;i<8;i++)
1029                  {
1030                          b>>=1;
1031                          t=SDA;
1032                          b|=t<<7;
1033                          SCLK=1;
1034                          SCLK=0;
1035                  }
1036                  return b/16*10+b%16;
1037          }
1038          
1039          uchar Read_Data(uchar addr)                               //从DS1302指定位置读数据
1040          {
1041                  uchar dat;
1042                  RST=0;
1043                  SCLK=0;
1044                  RST=1;
1045                  Write_A_Byte_To_DS1302(addr);
1046                  dat=Get_A_Byte_From_DS1302();
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 18  

1047                  SCLK=1;
1048                  RST=0;
1049                  return dat;
1050          }
1051          
1052          void Write_DS1302(uchar addr,uchar dat)    //向DS1302某地址写入数据
1053          {
1054                  SCLK=0;
1055                  RST=1;
1056                  Write_A_Byte_To_DS1302(addr);
1057                  Write_A_Byte_To_DS1302(dat);
1058                  SCLK=0;
1059                  RST=0;
1060          }
1061          
1062          void SET_DS1302()                                                  //设置时间
1063          {
1064                  Write_DS1302(0x8e,0x00);
1065                  Write_DS1302(0x82,(Current_Time[1]/10<<4)|(Current_Time[1]%10));
1066                  Write_DS1302(0x84,(Current_Time[2]/10<<4)|(Current_Time[2]%10));
1067                  Write_DS1302(0x8e,0x80);
1068          }
1069          
1070          void GetTime()                                                    //读取当前时间（秒，分，时）
1071          {
1072                  Current_Time[0]=Read_Data(0x81);          //second
1073                  Current_Time[1]=Read_Data(0x83);          //minute
1074                  Current_Time[2]=Read_Data(0x85);          //hour
1075          }
1076          
1077          void EX_INT0() interrupt 0                                 //键盘中断
1078          {
1079                  if(K1==0)
1080                  {
1081                          Adjust_Flag=1;
1082                          Current_Time[2]=(Current_Time[2]+1)%24;
1083                  }
1084                  else
1085                  if(K2==0)
1086                  {
1087                          Adjust_Flag=1;
1088                          Current_Time[1]=(Current_Time[1]+1)%60;
1089                  }
1090                  else
1091                  if(K3==0)
1092                  {
1093                          SET_DS1302();
1094                          Adjust_Flag=0;
1095                  }
1096          }
1097          
1098          //74HC595
1099          
1100          void WriteByte(uchar dat)       //写一个字节数据
1101          {
1102                  char i;
1103                  for(i=0;i<8;i++)                //循环8次把编码传给锁存器
1104                  {
1105                          dat=dat>>1;                     //右移一位，取出该字节的最低位
1106                          R1=CY;                          //将该字节的最低位传给R
1107                          CLK=0;                          //将数据移入595，上升沿
1108                          CLK=1;
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 19  

1109                  }
1110          }
1111          
1112           void main()
1113          {
1114                  uint num;
1115                  IE=0x81;
1116                  IT0=0x01;
1117                  while(1)
1118                  {
1119                          uint speed,mov;
1120          //              if(Adjust_Flag==0)
1121          //              GetTime();
1122          //              NUM[0]=Current_Time[2]/10;                //hour
1123          //              NUM[1]=Current_Time[2]%10;
1124          //              NUM[2]=Current_Time[1]/10;                //minute
1125          //              NUM[3]=Current_Time[1]%10;
1126          //              NUM[4]=Current_Time[0]/10;                //second
1127          //              NUM[5]=Current_Time[0]%10;
1128          //              if(++speed>4)                                     //切换间隔
1129          //              {
1130          //                      speed=0;
1131                                  mov++;
1132          //                      k++;
1133                                  if(mov>17)
1134                                  {
1135          //                              NUM[0]=k%2;
1136          //                              NUM[1]=k%3;
1137          //                              NUM[2]=k%4;
1138          //                              NUM[3]=k%5;
1139          //                              NUM[4]=k%6;
1140          //                              NUM[5]=k%7;
1141                                          mov=0;
1142                          }
1143          //                      if(k>100)
1144          //                              k=0;
1145          //              }
1146                          for(num=0;num<16;num++)
1147                          {       
1148                                  P1=num; 
1149          
1150                                  WriteByte(Number[num]);                 // hour
1151                                  WriteByte(Number[num]);
1152                                  WriteByte(Number[num]);                 //minute
1153                                  WriteByte(Number[num]);
1154                                  WriteByte(Number[num]);                 //second
1155                                  WriteByte(seven_eight[mov*16+num]);
1156                                  STB=0;                                                  //12脚  
1157                                  STB=1;
1158                                  delay(3);                                                       //锁存显示数据
1159          
1160                          }
1161                  }
1162          }
1163          */
1164          
1165          #include<reg52.h>
1166          #define uchar unsigned char 
1167          #define uint unsigned int 
1168          
1169          sbit SDA=P3^5;                  //DS1302
1170          sbit SCLK=P3^6;
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 20  

1171          sbit RST=P3^7;
1172          
1173          sbit K1=P2^5;                   //choose
1174          sbit K2=P2^6;                   //adjust
1175          sbit K3=P2^7;                   //confirm
1176          
1177          sbit R1=P2^0;                   //74HC595
1178          sbit CLK=P2^1;
1179          sbit STB=P2^2;
1180          
1181          uchar Current_Time[7];  //Current time
1182          uchar Adjust_Flag=0;    //flag
1183          uchar NUM[6];
1184          uchar FLAG[6];
1185          uchar CHANGE[6]; 
1186          
1187          uchar code Number[]={
1188          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00, //0
1189          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00, //1
1190          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00, //2
1191          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00, //3
1192          0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00, //4
1193          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00, //5
1194          0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00, //6
1195          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00, //7
1196          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00, //8
1197          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00};//9
1198          
1199          uchar code zero_one[]={                                                                                                                 //0   ->   1
1200          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1201          0x7f,0x41,0x41,0x41,0x21,0x21,0x21,0x21,0x21,0x21,0x21,0x41,0x41,0x41,0x7f,0x00,//fir
1202          0x07,0x79,0x21,0x21,0x21,0x11,0x11,0x11,0x11,0x11,0x21,0x21,0x21,0x79,0x07,0x00,
1203          0x01,0x1f,0x61,0x21,0x11,0x11,0x09,0x09,0x09,0x11,0x11,0x21,0x61,0x1f,0x01,0x00,
1204          0x01,0x07,0x19,0x61,0x11,0x11,0x09,0x05,0x09,0x11,0x11,0x61,0x19,0x07,0x01,0x00,
1205          0x01,0x03,0x0d,0x11,0x31,0x09,0x05,0x03,0x05,0x09,0x31,0x11,0x0d,0x03,0x01,0x00,
1206          0x01,0x03,0x05,0x09,0x11,0x39,0x07,0x01,0x07,0x39,0x11,0x09,0x05,0x03,0x01,0x00,//mid
1207          0x01,0x03,0x05,0x05,0x09,0x1f,0x01,0x01,0x01,0x1f,0x09,0x05,0x05,0x03,0x01,0x00,
1208          0x01,0x03,0x03,0x05,0x07,0x0d,0x09,0x01,0x09,0x0d,0x07,0x05,0x03,0x03,0x01,0x00,
1209          0x01,0x03,0x03,0x03,0x03,0x05,0x05,0x05,0x05,0x05,0x03,0x03,0x03,0x03,0x01,0x00,
1210          0x01,0x01,0x01,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x01,0x01,0x01,0x00,
1211          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,//last
1212          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1213          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1214          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1215          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1216          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1217          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1218          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1219          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00};
1220          
1221          uchar code one_two[]={                                                                                                                                                          //1   ->    2
1222          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1223          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,//fir
1224          0x01,0x01,0x01,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x01,0x01,0x01,0x00,
1225          0x01,0x03,0x03,0x03,0x03,0x05,0x05,0x05,0x06,0x06,0x02,0x02,0x02,0x02,0x01,0x00,
1226          0x01,0x03,0x03,0x05,0x05,0x09,0x09,0x01,0x0b,0x0a,0x06,0x04,0x0a,0x02,0x01,0x00,
1227          0x01,0x03,0x05,0x05,0x09,0x11,0x01,0x01,0x02,0x15,0x0e,0x0c,0x14,0x02,0x01,0x00,
1228          0x01,0x03,0x05,0x09,0x11,0x21,0x01,0x01,0x02,0x24,0x19,0x1e,0x34,0x02,0x01,0x00,//mid
1229          0x01,0x03,0x0d,0x11,0x21,0x01,0x01,0x01,0x02,0x0c,0x30,0x3f,0x04,0x02,0x01,0x00,
1230          0x01,0x07,0x19,0x61,0x01,0x01,0x01,0x01,0x03,0x18,0x60,0x78,0x1e,0x06,0x01,0x00,
1231          0x01,0x1f,0x61,0x01,0x01,0x01,0x01,0x01,0x1e,0x60,0x20,0x10,0x68,0x1e,0x01,0x00,
1232          0x07,0x79,0x01,0x01,0x01,0x01,0x01,0x07,0x78,0x20,0x20,0x10,0x10,0x78,0x07,0x00,
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 21  

1233          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,//last
1234          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,
1235          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,
1236          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,
1237          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,
1238          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,
1239          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,
1240          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,
1241          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00};
1242          
1243          uchar code two_three[]={                                                                                                                                                                //2   ->   3
1244          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,
1245          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,//fir
1246          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x20,0x20,0x20,0x20,0x40,0x78,0x7f,0x00,
1247          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x10,0x20,0x20,0x20,0x60,0x3e,0x7f,0x00,
1248          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x80,0x80,0x10,0x70,0x38,0x26,0x7f,0x00,
1249          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,0x04,0x28,0x10,0x1c,0x22,0x7f,0x00,
1250          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,0x22,0x14,0x08,0x14,0x22,0x7f,0x00,//mid
1251          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,0x10,0x0a,0x04,0x1c,0x22,0x7f,0x00,
1252          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x08,0x08,0x04,0x07,0x0e,0x32,0x7f,0x00,
1253          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x04,0x04,0x02,0x02,0x03,0x3e,0x7f,0x00,
1254          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x02,0x02,0x02,0x02,0x01,0x0f,0x7f,0x00, 
1255          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,//last
1256          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
1257          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
1258          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
1259          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
1260          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
1261          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
1262          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
1263          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00};
1264                                                                           
1265          uchar code three_four[]={                                                                                                                                                       //3   ->   4            
1266          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,                                                                                                                                                                //3   
             -->   4
1267          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,//fir
1268          0x71,0x0f,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x79,0x0f,0x00,
1269          0x41,0x3d,0x03,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x61,0x1f,0x01,0x00,
1270          0x41,0x31,0x0d,0x03,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x61,0x19,0x07,0x01,0x00,
1271          0x41,0x21,0x19,0x05,0x03,0x01,0x01,0x7f,0x01,0x01,0x21,0x11,0x0d,0x03,0x01,0x00,
1272          0x41,0x21,0x11,0x09,0x05,0x03,0x01,0x7f,0x01,0x21,0x11,0x09,0x05,0x03,0x01,0x00,//mid
1273          0x41,0x21,0x11,0x11,0x09,0x05,0x01,0x7f,0x01,0x11,0x09,0x05,0x05,0x03,0x01,0x00,
1274          0x41,0x21,0x21,0x11,0x11,0x09,0x09,0x7f,0x09,0x09,0x05,0x05,0x03,0x03,0x01,0x00,
1275          0x41,0x21,0x21,0x21,0x21,0x11,0x11,0x7f,0x05,0x05,0x03,0x03,0x03,0x03,0x01,0x00,
1276          0x41,0x41,0x41,0x21,0x21,0x21,0x21,0x7f,0x03,0x03,0x03,0x03,0x01,0x01,0x01,0x00,
1277          0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,//last
1278          0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1279          0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1280          0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1281          0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1282          0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1283          0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1284          0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1285          0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00};
1286          
1287          uchar code four_five[]={                                                                                                                                                                //4   ->   5
1288          0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1289          0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,//fir
1290          0x41,0x41,0x41,0x42,0x42,0x42,0x42,0x7f,0x03,0x03,0x03,0x03,0x01,0x01,0x01,0x00,
1291          0x41,0x42,0x42,0x42,0x42,0x44,0x44,0x7f,0x05,0x05,0x03,0x03,0x03,0x03,0x01,0x00,
1292          0x41,0x42,0x42,0x44,0x44,0x48,0x48,0x7f,0x09,0x09,0x05,0x05,0x03,0x03,0x01,0x00,
1293          0x41,0x42,0x44,0x44,0x48,0x50,0x40,0x7f,0x01,0x11,0x09,0x05,0x05,0x03,0x01,0x00,
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 22  

1294          0x41,0x42,0x44,0x48,0x50,0x60,0x40,0x7f,0x01,0x21,0x11,0x09,0x05,0x03,0x01,0x00,//mid
1295          0x41,0x42,0x4c,0x50,0x60,0x40,0x40,0x7f,0x01,0x01,0x21,0x11,0x0d,0x03,0x01,0x00,
1296          0x41,0x46,0x58,0x60,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x61,0x19,0x07,0x01,0x00,
1297          0x41,0x5e,0x60,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x61,0x1f,0x01,0x00,
1298          0x47,0x78,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x79,0x07,0x00,
1299          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,//last
1300          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
1301          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
1302          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
1303          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
1304          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
1305          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
1306          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
1307          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00};
1308          
1309          uchar code five_six[]={                                                                                                                                                         //5   ->   6
1310          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,                                                                                                                                                                         
1311          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,//fir
1312          0x70,0x4f,0x40,0x40,0x40,0x40,0x40,0x7f,0x0f,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
1313          0x40,0x7c,0x43,0x40,0x40,0x40,0x40,0x7f,0x3d,0x03,0x01,0x01,0x01,0x01,0x7f,0x00,
1314          0x40,0x70,0x4c,0x43,0x40,0x40,0x40,0x7f,0x31,0x0d,0x03,0x01,0x01,0x01,0x7f,0x00,
1315          0x40,0x60,0x58,0x44,0x42,0x40,0x40,0x7f,0x21,0x19,0x09,0x03,0x01,0x01,0x7f,0x00,
1316          0x40,0x60,0x50,0x48,0x44,0x42,0x40,0x7f,0x21,0x11,0x09,0x05,0x03,0x01,0x7f,0x00,//mid
1317          0x40,0x60,0x50,0x50,0x48,0x44,0x40,0x7f,0x21,0x11,0x11,0x09,0x05,0x01,0x7f,0x00,
1318          0x40,0x60,0x60,0x50,0x50,0x48,0x48,0x7f,0x21,0x21,0x11,0x11,0x09,0x09,0x7f,0x00,
1319          0x40,0x60,0x60,0x60,0x60,0x50,0x50,0x7f,0x21,0x21,0x21,0x21,0x11,0x11,0x7f,0x00,
1320          0x40,0x40,0x40,0x60,0x60,0x60,0x60,0x7f,0x41,0x41,0x21,0x21,0x21,0x21,0x7f,0x00,
1321          0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,//last
1322          0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1323          0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1324          0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1325          0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1326          0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1327          0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1328          0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1329          0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00};
1330          
1331          
1332          uchar code six_seven[]={                                                                                                                                                                //6   ->   7
1333          0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1334          0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,//fir                                                                                                                                                                   
             -                        42,0x
1335          0x40,0x40,0x40,0x40,0x40,0x40,0x78,0x4f,0x21,0x21,0x21,0x21,0x41,0x41,0x7f,0x00,
1336          0x40,0x40,0x40,0x40,0x40,0x60,0x5e,0x49,0x15,0x21,0x21,0x21,0x21,0x79,0x07,0x00,
1337          0x40,0x40,0x40,0x40,0x60,0x78,0x56,0x49,0x0d,0x11,0x11,0x21,0x61,0x1f,0x01,0x00,
1338          0x40,0x40,0x40,0x60,0x70,0x6c,0x62,0x65,0x09,0x11,0x21,0x61,0x19,0x07,0x01,0x00,
1339          0x40,0x40,0x60,0x70,0x68,0x44,0x42,0x41,0x07,0x39,0x11,0x09,0x05,0x03,0x01,0x00,//mid
1340          0x40,0x40,0x50,0x68,0x64,0x44,0x42,0x41,0x01,0x1f,0x09,0x05,0x05,0x03,0x01,0x00,
1341          0x40,0x48,0x58,0x54,0x64,0x62,0x42,0x41,0x09,0x0d,0x07,0x05,0x03,0x03,0x01,0x00,
1342          0x44,0x4c,0x52,0x62,0x42,0x42,0x41,0x45,0x05,0x03,0x03,0x03,0x03,0x01,0x01,0x00,
1343          0x42,0x4e,0x72,0x42,0x41,0x41,0x41,0x43,0x03,0x03,0x03,0x01,0x01,0x01,0x01,0x00,
1344          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,//last
1345          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1346          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1347          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1348          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1349          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1350          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1351          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1352          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00};
1353          
1354          
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 23  

1355          uchar code seven_eight[]={                                                                                                                                                              //7   ->   8
1356          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1357          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,//fir
1358          0x7f,0x61,0x61,0x61,0x61,0x41,0x41,0x43,0x03,0x03,0x03,0x01,0x01,0x01,0x01,0x00,
1359          0x7f,0x51,0x51,0x61,0x61,0x61,0x61,0x45,0x05,0x03,0x03,0x03,0x03,0x01,0x01,0x00,
1360          0x7f,0x49,0x49,0x51,0x51,0x61,0x61,0x41,0x09,0x0d,0x07,0x05,0x03,0x03,0x01,0x00,
1361          0x7f,0x41,0x45,0x49,0x51,0x51,0x61,0x41,0x01,0x1f,0x09,0x05,0x05,0x03,0x01,0x00,
1362          0x7f,0x41,0x43,0x45,0x49,0x51,0x31,0x41,0x07,0x39,0x11,0x09,0x05,0x03,0x01,0x00,//mid
1363          0x7f,0x41,0x41,0x43,0x45,0x49,0x59,0x61,0x09,0x11,0x21,0x61,0x19,0x07,0x01,0x00,
1364          0x7f,0x41,0x41,0x41,0x43,0x4d,0x71,0x49,0x0d,0x11,0x11,0x21,0x61,0x1f,0x01,0x00,
1365          0x7f,0x41,0x41,0x41,0x41,0x43,0x7d,0x49,0x15,0x21,0x21,0x21,0x21,0x79,0x07,0x00,
1366          0x7f,0x41,0x41,0x41,0x41,0x41,0x4f,0x71,0x21,0x21,0x21,0x21,0x41,0x41,0x7f,0x00,
1367          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,//last
1368          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1369          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1370          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1371          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1372          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1373          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1374          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1375          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00};
1376          
1377          
1378          uchar code eight_nine[]={                                                                                                                                                               //8   ->   9
1379          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1380          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,//fir
1381          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x21,0x21,0x21,0x21,0x41,0x41,0x7f,0x00,
1382          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x15,0x21,0x21,0x21,0x21,0x79,0x07,0x00,
1383          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x0d,0x11,0x11,0x21,0x61,0x1f,0x01,0x00,
1384          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x09,0x11,0x21,0x61,0x19,0x07,0x01,0x00,
1385          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x07,0x39,0x11,0x09,0x05,0x03,0x01,0x00,//mid
1386          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x1f,0x09,0x05,0x05,0x03,0x01,0x00,
1387          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x09,0x0d,0x07,0x05,0x03,0x03,0x01,0x00,
1388          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x05,0x03,0x03,0x03,0x03,0x01,0x01,0x00,
1389          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x03,0x03,0x03,0x01,0x01,0x01,0x01,0x00,
1390          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,//last
1391          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1392          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1393          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1394          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1395          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1396          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1397          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1398          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00};
1399          
1400          
1401          uchar code nine_zero[]={                                                                                                                                                                //9   ->   0
1402          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
1403          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,//fir
1404          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x71,0x0f,0x03,0x03,0x03,0x01,0x01,0x01,0x00,
1405          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x3d,0x05,0x03,0x03,0x03,0x03,0x01,0x00,
1406          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x39,0x0d,0x07,0x05,0x03,0x03,0x01,0x00,
1407          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x21,0x19,0x0d,0x07,0x05,0x03,0x01,0x00,
1408          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x21,0x31,0x19,0x0d,0x07,0x03,0x01,0x00,//mid
1409          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x21,0x11,0x31,0x19,0x0d,0x03,0x01,0x00,
1410          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x21,0x21,0x11,0x71,0x19,0x0f,0x01,0x00,
1411          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x21,0x21,0x21,0x61,0x1f,0x11,0x00,
1412          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x21,0x21,0x79,0x27,0x00,
1413          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,//last
1414          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1415          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1416          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 24  

1417          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1418          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1419          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1420          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1421          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00};
1422                                                                                                                                                                     
1423          
1424          uchar code five_zero[]={                                                                                                                //5   ->   0
1425          //0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
1426          //0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
1427          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
1428          0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,//fir
1429          0x7f,0x78,0x40,0x40,0x40,0x40,0x40,0x71,0x0f,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
1430          0x7f,0x5e,0x60,0x40,0x40,0x40,0x40,0x41,0x3d,0x03,0x01,0x01,0x01,0x01,0x7f,0x00,
1431          0x7f,0x46,0x58,0x60,0x40,0x40,0x40,0x41,0x31,0x0d,0x03,0x01,0x01,0x01,0x7f,0x00,
1432          0x7f,0x42,0x4c,0x50,0x60,0x40,0x40,0x41,0x21,0x19,0x05,0x02,0x01,0x01,0x7f,0x00,
1433          0x7f,0x42,0x44,0x48,0x50,0x60,0x40,0x41,0x21,0x11,0x09,0x05,0x03,0x01,0x7f,0x00,//mid
1434          0x7f,0x42,0x44,0x44,0x48,0x04,0x40,0x41,0x21,0x11,0x11,0x09,0x05,0x01,0x7f,0x00,
1435          0x7f,0x42,0x42,0x44,0x44,0x48,0x48,0x41,0x21,0x21,0x11,0x11,0x09,0x09,0x7f,0x00,
1436          0x7f,0x42,0x42,0x42,0x42,0x44,0x44,0x41,0x21,0x21,0x21,0x21,0x11,0x11,0x7f,0x00,
1437          0x7f,0x41,0x41,0x42,0x42,0x42,0x42,0x41,0x41,0x41,0x21,0x21,0x21,0x21,0x7f,0x00,
1438          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,//last
1439          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1440          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1441          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1442          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1443          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1444          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1445          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1446          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00};
1447          
1448          uchar code three_zero[]={                                                                                                               //3   ->   0
1449          //0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
1450          //0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
1451          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,                                                                                                                                                                           
1452          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,//fir
1453          0x7f,0x0f,0x01,0x01,0x01,0x01,0x01,0x71,0x0f,0x01,0x01,0x01,0x01,0x01,0x7f,0x00,
1454          0x7f,0x3d,0x03,0x01,0x01,0x01,0x01,0x41,0x3d,0x03,0x01,0x01,0x01,0x01,0x7f,0x00,
1455          0x7f,0x31,0x0d,0x03,0x01,0x01,0x01,0x41,0x31,0x0d,0x03,0x01,0x01,0x01,0x7f,0x00,
1456          0x7f,0x21,0x19,0x05,0x03,0x01,0x01,0x41,0x21,0x19,0x05,0x03,0x01,0x01,0x7f,0x00,
1457          0x7f,0x21,0x11,0x09,0x05,0x03,0x01,0x41,0x21,0x11,0x09,0x05,0x03,0x01,0x7f,0x00,//mid
1458          0x7f,0x21,0x11,0x11,0x09,0x05,0x01,0x41,0x21,0x11,0x11,0x09,0x05,0x01,0x7f,0x00,
1459          0x7f,0x21,0x21,0x11,0x11,0x09,0x09,0x41,0x21,0x21,0x11,0x11,0x09,0x09,0x7f,0x00,
1460          0x7f,0x21,0x21,0x21,0x21,0x11,0x11,0x41,0x21,0x21,0x21,0x21,0x11,0x11,0x7f,0x00,
1461          0x7f,0x41,0x41,0x21,0x21,0x21,0x21,0x41,0x41,0x41,0x21,0x21,0x21,0x21,0x7f,0x00,
1462          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,//last
1463          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1464          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1465          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1466          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1467          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1468          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1469          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1470          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00};
1471          
1472          uchar code two_zero[]={                                                                                                                 //2   ->   0
1473          //0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,
1474          //0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,
1475          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,
1476          0x7f,0x01,0x01,0x01,0x01,0x01,0x01,0x7f,0x40,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,//fir
1477          0x7f,0x0f,0x01,0x01,0x01,0x01,0x01,0x47,0x78,0x40,0x40,0x40,0x40,0x40,0x7f,0x00,
1478          0x7f,0x3d,0x03,0x01,0x01,0x01,0x01,0x41,0x5e,0x60,0x40,0x40,0x40,0x40,0x7f,0x00,
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 25  

1479          0x7f,0x31,0x0d,0x03,0x01,0x01,0x01,0x41,0x46,0x58,0x60,0x40,0x40,0x40,0x7f,0x00,
1480          0x7f,0x21,0x19,0x05,0x03,0x01,0x01,0x41,0x42,0x4c,0x50,0x60,0x40,0x40,0x7f,0x00,
1481          0x7f,0x21,0x11,0x09,0x05,0x03,0x01,0x41,0x42,0x44,0x48,0x50,0x60,0x40,0x7f,0x00,//mid
1482          0x7f,0x21,0x11,0x11,0x09,0x05,0x01,0x41,0x42,0x44,0x44,0x48,0x50,0x40,0x7f,0x00,
1483          0x7f,0x21,0x21,0x11,0x11,0x09,0x09,0x41,0x42,0x42,0x44,0x44,0x48,0x48,0x7f,0x00,
1484          0x7f,0x21,0x21,0x21,0x21,0x11,0x11,0x41,0x42,0x42,0x42,0x42,0x44,0x44,0x7f,0x00,
1485          0x7f,0x41,0x41,0x21,0x21,0x21,0x21,0x41,0x41,0x41,0x42,0x42,0x42,0x42,0x7f,0x00,
1486          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,//last
1487          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1488          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1489          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1490          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1491          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1492          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1493          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00,
1494          0x7f,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x7f,0x00};
1495          void delay(uint z)
1496          {
1497   1              int x,y;
1498   1              for(x=0;x<z;x++)
1499   1                      for(y=0;y<110;y++);
1500   1      }
1501          
1502          //DS1302
1503          void Write_A_Byte_To_DS1302(uchar x)      //向DS1302写入一个字节
1504          {
1505   1              uchar i;
1506   1              for(i=0;i<8;i++)
1507   1              {
1508   2                      SDA=x&1;
1509   2                      SCLK=1;
1510   2                      SCLK=0;
1511   2                      x>>=1;
1512   2              }
1513   1      }
1514          
1515          uchar Get_A_Byte_From_DS1302()                    //从DS1302读取一个字节
1516          {
1517   1              uchar i,b,t;
1518   1              for(i=0;i<8;i++)
1519   1              {
1520   2                      b>>=1;
1521   2                      t=SDA;
1522   2                      b|=t<<7;
1523   2                      SCLK=1;
1524   2                      SCLK=0;
1525   2              }
1526   1              return b/16*10+b%16;
1527   1      }
1528          
1529          uchar Read_Data(uchar addr)                               //从DS1302指定位置读数据
1530          {
1531   1              uchar dat;
1532   1              RST=0;
1533   1              SCLK=0;
1534   1              RST=1;
1535   1              Write_A_Byte_To_DS1302(addr);
1536   1              dat=Get_A_Byte_From_DS1302();
1537   1              SCLK=1;
1538   1              RST=0;
1539   1              return dat;
1540   1      }
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 26  

1541          
1542          void Write_DS1302(uchar addr,uchar dat)    //向DS1302某地址写入数据
1543          {
1544   1              SCLK=0;
1545   1              RST=1;
1546   1              Write_A_Byte_To_DS1302(addr);
1547   1              Write_A_Byte_To_DS1302(dat);
1548   1              SCLK=0;
1549   1              RST=0;
1550   1      }
1551          
1552          void SET_DS1302()                                                  //设置时间
1553          {
1554   1              Write_DS1302(0x8e,0x00);
1555   1              Write_DS1302(0x82,(Current_Time[1]/10<<4)|(Current_Time[1]%10));
1556   1              Write_DS1302(0x84,(Current_Time[2]/10<<4)|(Current_Time[2]%10));
1557   1              Write_DS1302(0x8e,0x80);
1558   1      }
1559          
1560          void GetTime()                                                    //读取当前时间（秒，分，时）
1561          {
1562   1              Current_Time[0]=Read_Data(0x81);          //second
1563   1              Current_Time[1]=Read_Data(0x83);          //minute
1564   1              Current_Time[2]=Read_Data(0x85);          //hour
1565   1      }
1566          
1567          void EX_INT0() interrupt 0                                 //键盘中断
1568          {
1569   1              if(K1==0)
1570   1              {
1571   2                      Adjust_Flag=1;
1572   2                      Current_Time[2]=(Current_Time[2]+1)%24;
1573   2              }
1574   1              else
1575   1              if(K2==0)
1576   1              {
1577   2                      Adjust_Flag=1;
1578   2                      Current_Time[1]=(Current_Time[1]+1)%60;
1579   2              }
1580   1              else
1581   1              if(K3==0)
1582   1              {
1583   2                      SET_DS1302();
1584   2                      Adjust_Flag=0;
1585   2              }
1586   1      }
1587          
1588          //74HC595
1589          
1590          void WriteByte(uchar dat)       //写一个字节数据
1591          {
1592   1              char i;
1593   1              for(i=0;i<8;i++)                //循环8次把编码传给锁存器
1594   1              {
1595   2                      dat=dat>>1;                     //右移一位，取出该字节的最低位
1596   2                      R1=CY;                          //将该字节的最低位传给R
1597   2                      CLK=0;                          //将数据移入595，上升沿
1598   2                      CLK=1;
1599   2              }
1600   1      }
1601          
1602           void main()
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 27  

1603          {
1604   1              uint num,A,B,C,D,E,F;
1605   1              IE=0x81;
1606   1              IT0=0x01;
1607   1              P0=0;
1608   1              while(1)
1609   1              {
1610   2      
1611   2                      if(Adjust_Flag==0)
1612   2                              GetTime();
1613   2      
1614   2      // 每个点阵要显示的数字
1615   2                      NUM[0]=Current_Time[2]/10;                //hour
1616   2                      NUM[1]=Current_Time[2]%10;
1617   2                      NUM[2]=Current_Time[1]/10;                //minute
1618   2                      NUM[3]=Current_Time[1]%10;
1619   2                      NUM[4]=Current_Time[0]/10;                //second
1620   2                      NUM[5]=Current_Time[0]%10;
1621   2                      if(CHANGE[0]!=NUM[0])
1622   2                              A=0;
1623   2                      if(CHANGE[1]!=NUM[1])
1624   2                              B=0;
1625   2                      if(CHANGE[2]!=NUM[2])
1626   2                              C=0;
1627   2                      if(CHANGE[3]!=NUM[3])
1628   2                              D=0;
1629   2                      if(CHANGE[4]!=NUM[4])
1630   2                              E=0;
1631   2                      if(CHANGE[5]!=NUM[5])
1632   2                              F=0;
1633   2      
1634   2                      for(num=0;num<16;num++)
1635   2                      {       
1636   3                              P1=num;                                                                         //line
1637   3                              if(A<320)                                                                       //16*11
1638   3                              {
1639   4                                      switch(NUM[0])
1640   4                                      {
1641   5                                              case 0:
1642   5                                              {                                                       
1643   6                                                      WriteByte(two_zero[A]);
1644   6                                                      CHANGE[0]=0;
1645   6                                                      break;
1646   6                                              }
1647   5                                              case 1:
1648   5                                              {
1649   6                                                      WriteByte(zero_one[A]);
1650   6                                                      CHANGE[0]=1;
1651   6                                                      break;
1652   6                                              }
1653   5                                              case 2:
1654   5                                              {
1655   6                                                      WriteByte(one_two[A]);
1656   6                                                      CHANGE[0]=2;
1657   6                                                      break;
1658   6                                              }
1659   5                                      }
1660   4                                      A++;
1661   4                              }
1662   3                              else                                                                                                       
1663   3                                      WriteByte(Number[NUM[0]*16+num]);                       // hour                         
1664   3      //////////////////////////////////////hour 1////////////////////////////////////
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 28  

1665   3                              if(B<320)                                                                       //16*11
1666   3                              {
1667   4                                      switch(NUM[1])
1668   4                                      {
1669   5                                              case 0:
1670   5                                              {
1671   6                                                      if(NUM[0]==0)                                   //NB.!!!!!!!!!!!!!!!!!!!
1672   6                                                              WriteByte(three_zero[B]);
1673   6                                                      else                                                    
1674   6                                                              WriteByte(nine_zero[B]);
1675   6                                                      CHANGE[1]=0;
1676   6                                                      break;
1677   6                                              }
1678   5                                              case 1:
1679   5                                              {
1680   6                                                      WriteByte(zero_one[B]);
1681   6                                                      CHANGE[1]=1;
1682   6                                                      break;
1683   6                                              }
1684   5                                              case 2:
1685   5                                              {
1686   6                                                      WriteByte(one_two[B]);
1687   6                                                      CHANGE[1]=2;
1688   6                                                      break;
1689   6                                              }
1690   5                                              case 3:
1691   5                                              {
1692   6                                                      WriteByte(two_three[B]);
1693   6                                                      CHANGE[1]=3;
1694   6                                                      break;
1695   6                                              }
1696   5                                              case 4:
1697   5                                              {
1698   6                                                      WriteByte(three_four[B]);
1699   6                                                      CHANGE[1]=4;
1700   6                                                      break;
1701   6                                              }
1702   5                                              case 5:
1703   5                                              {
1704   6                                                      WriteByte(four_five[B]);
1705   6                                                      CHANGE[1]=5;
1706   6                                                      break;
1707   6                                              }
1708   5                                              case 6:
1709   5                                              {
1710   6                                                      WriteByte(five_six[B]);
1711   6                                                      CHANGE[1]=6;
1712   6                                                      break;
1713   6                                              }
1714   5                                              case 7:
1715   5                                              {
1716   6                                                      WriteByte(six_seven[B]);
1717   6                                                      CHANGE[1]=7;
1718   6                                                      break;
1719   6                                              }
1720   5                                              case 8:
1721   5                                              {
1722   6                                                      WriteByte(seven_eight[B]);
1723   6                                                      CHANGE[1]=8;
1724   6                                                      break;
1725   6                                              }
1726   5                                              case 9:
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 29  

1727   5                                              {
1728   6                                                      WriteByte(eight_nine[B]);
1729   6                                                      CHANGE[1]=9;
1730   6                                                      break;
1731   6                                              }                       
1732   5                                      }
1733   4                                      B++;
1734   4                              }
1735   3                              else                                                                                                               
1736   3                                      WriteByte(Number[NUM[1]*16+num]);                                                
1737   3      ////////////////////////////////////minute2//////////////////////////////////////
1738   3                              if(C<320)                                                                       //minute
1739   3                              {
1740   4                                      switch(NUM[2])
1741   4                                      {
1742   5                                              case 0:
1743   5                                              {
1744   6                                                      WriteByte(five_zero[C]);
1745   6                                                      CHANGE[2]=0;
1746   6                                                      break;
1747   6                                              }
1748   5                                              case 1:
1749   5                                              {
1750   6                                                      WriteByte(zero_one[C]);
1751   6                                                      CHANGE[2]=1;
1752   6                                                      break;
1753   6                                              }
1754   5                                              case 2:
1755   5                                              {
1756   6                                                      WriteByte(one_two[C]);
1757   6                                                      CHANGE[2]=2;
1758   6                                                      break;
1759   6                                              }
1760   5                                              case 3:
1761   5                                              {
1762   6                                                      WriteByte(two_three[C]);
1763   6                                                      CHANGE[2]=3;
1764   6                                                      break;
1765   6                                              }
1766   5                                              case 4:
1767   5                                              {
1768   6                                                      WriteByte(three_four[C]);
1769   6                                                      CHANGE[2]=4;
1770   6                                                      break;
1771   6                                              }
1772   5                                              case 5:
1773   5                                              {
1774   6                                                      WriteByte(four_five[C]);
1775   6                                                      CHANGE[2]=5;
1776   6                                                      break;
1777   6                                              }
1778   5                                      }
1779   4                                      C++;
1780   4                              }
1781   3                              else                                                                                                            
1782   3                                      WriteByte(Number[NUM[2]*16+num]);                       //minute                 
1783   3      //////////////////////////////////minute 1/////////////////////////////////////
1784   3                              if(D<320)                                                                       //16*11                  
1785   3                              {
1786   4                                      switch(NUM[3])
1787   4                                      {
1788   5                                              case 0:
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 30  

1789   5                                              {
1790   6                                                      WriteByte(nine_zero[D]);
1791   6                                                      CHANGE[3]=0;
1792   6                                                      break;
1793   6                                              }
1794   5                                              case 1:
1795   5                                              {
1796   6                                                      WriteByte(zero_one[D]);
1797   6                                                      CHANGE[3]=1;
1798   6                                                      break;
1799   6                                              }
1800   5                                              case 2:
1801   5                                              {
1802   6                                                      WriteByte(one_two[D]);
1803   6                                                      CHANGE[3]=2;
1804   6                                                      break;
1805   6                                              }
1806   5                                              case 3:
1807   5                                              {
1808   6                                                      WriteByte(two_three[D]);
1809   6                                                      CHANGE[3]=3;
1810   6                                                      break;
1811   6                                              }
1812   5                                              case 4:
1813   5                                              {
1814   6                                                      WriteByte(three_four[D]);
1815   6                                                      CHANGE[3]=4;
1816   6                                                      break;
1817   6                                              }
1818   5                                              case 5:
1819   5                                              {
1820   6                                                      WriteByte(four_five[D]);
1821   6                                                      CHANGE[3]=5;
1822   6                                                      break;
1823   6                                              }
1824   5                                              case 6:
1825   5                                              {
1826   6                                                      WriteByte(five_six[D]);
1827   6                                                      CHANGE[3]=6;
1828   6                                                      break;
1829   6                                              }
1830   5                                              case 7:
1831   5                                              {
1832   6                                                      WriteByte(six_seven[D]);
1833   6                                                      CHANGE[3]=7;
1834   6                                                      break;
1835   6                                              }
1836   5                                              case 8:
1837   5                                              {
1838   6                                                      WriteByte(seven_eight[D]);
1839   6                                                      CHANGE[3]=8;
1840   6                                                      break;
1841   6                                              }
1842   5                                              case 9:
1843   5                                              {
1844   6                                                      WriteByte(eight_nine[D]);
1845   6                                                      CHANGE[3]=9;
1846   6                                                      break;
1847   6                                              }                       
1848   5                                      }
1849   4                                      D++;
1850   4                              }
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 31  

1851   3                              else                                                                                       
1852   3                                      WriteByte(Number[NUM[3]*16+num]);                                 
1853   3      ////////////////////////////////////second 2/////////////////////////////////////
1854   3                              if(E<320)                                                                       //second
1855   3                              {
1856   4                                      switch(NUM[4])
1857   4                                      {
1858   5                                              case 0:
1859   5                                              {
1860   6                                                      WriteByte(five_zero[E]);
1861   6                                                      CHANGE[4]=0;
1862   6                                                      break;
1863   6                                              }
1864   5                                              case 1:
1865   5                                              {
1866   6                                                      WriteByte(zero_one[E]);
1867   6                                                      CHANGE[4]=1;
1868   6                                                      break;
1869   6                                              }
1870   5                                              case 2:
1871   5                                              {
1872   6                                                      WriteByte(one_two[E]);
1873   6                                                      CHANGE[4]=2;
1874   6                                                      break;
1875   6                                              }
1876   5                                              case 3:
1877   5                                              {
1878   6                                                      WriteByte(two_three[E]);
1879   6                                                      CHANGE[4]=3;
1880   6                                                      break;
1881   6                                              }
1882   5                                              case 4:
1883   5                                              {
1884   6                                                      WriteByte(three_four[E]);
1885   6                                                      CHANGE[4]=4;
1886   6                                                      break;
1887   6                                              }
1888   5                                              case 5:
1889   5                                              {
1890   6                                                      WriteByte(four_five[E]);
1891   6                                                      CHANGE[4]=5;
1892   6                                                      break;
1893   6                                              }
1894   5                                      }
1895   4                                      E++;
1896   4                              }
1897   3                              else                                                                                      
1898   3                                      WriteByte(Number[NUM[4]*16+num]);                                                  
1899   3      ////////////////////////////////////second1////////////////////////////////////////
1900   3                              if(F<320)                                                                       //16*11
1901   3                              {
1902   4                                      switch(NUM[5])
1903   4                                      {
1904   5                                              case 0:
1905   5                                              {
1906   6                                                      WriteByte(nine_zero[F]);
1907   6                                                      CHANGE[5]=0;
1908   6                                                      break;
1909   6                                              }
1910   5                                              case 1:
1911   5                                              {
1912   6                                                      WriteByte(zero_one[F]);
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 32  

1913   6                                                      CHANGE[5]=1;
1914   6                                                      break;
1915   6                                              }
1916   5                                              case 2:
1917   5                                              {
1918   6                                                      WriteByte(one_two[F]);
1919   6                                                      CHANGE[5]=2;
1920   6                                                      break;
1921   6                                              }
1922   5                                              case 3:
1923   5                                              {
1924   6                                                      WriteByte(two_three[F]);
1925   6                                                      CHANGE[5]=3;
1926   6                                                      break;
1927   6                                              }
1928   5                                              case 4:
1929   5                                              {
1930   6                                                      WriteByte(three_four[F]);
1931   6                                                      CHANGE[5]=4;
1932   6                                                      break;
1933   6                                              }
1934   5                                              case 5:
1935   5                                              {
1936   6                                                      WriteByte(four_five[F]);
1937   6                                                      CHANGE[5]=5;
1938   6                                                      break;
1939   6                                              }
1940   5                                              case 6:
1941   5                                              {
1942   6                                                      WriteByte(five_six[F]);
1943   6                                                      CHANGE[5]=6;
1944   6                                                      break;
1945   6                                              }
1946   5                                              case 7:
1947   5                                              {
1948   6                                                      WriteByte(six_seven[F]);
1949   6                                                      CHANGE[5]=7;
1950   6                                                      break;
1951   6                                              }
1952   5                                              case 8:
1953   5                                              {
1954   6                                                      WriteByte(seven_eight[F]);
1955   6                                                      CHANGE[5]=8;
1956   6                                                      break;
1957   6                                              }
1958   5                                              case 9:
1959   5                                              {
1960   6                                                      WriteByte(eight_nine[F]);
1961   6                                                      CHANGE[5]=9;
1962   6                                                      break;
1963   6                                              }                       
1964   5                                      }
1965   4                                      F++;
1966   4                              }
1967   3                              else
1968   3                                      F=0;                                                                                                     
1969   3      //////////////////////////////////////////////////////////////////////////
1970   3                              STB=0;                                                          //12脚  
1971   3                              STB=1;
1972   3                              delay(3);                                                       //锁存显示数据
1973   3      
1974   3                      }
C51 COMPILER V9.00   ART                                                                   03/26/2013 23:29:30 PAGE 33  

1975   2      
1976   2              }
1977   1      }
1978          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1731    ----
   CONSTANT SIZE    =   4320    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     26      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
